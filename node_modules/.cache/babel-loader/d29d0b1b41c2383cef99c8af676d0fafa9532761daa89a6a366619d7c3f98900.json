{"ast":null,"code":"import _objectSpread from\"C:/Users/habib/Dropbox/Apps/qts/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AssessmentContext=/*#__PURE__*/createContext(undefined);export const useAssessment=()=>{const context=useContext(AssessmentContext);if(context===undefined){throw new Error('useAssessment must be used within an AssessmentProvider');}return context;};export const AssessmentProvider=_ref=>{let{children}=_ref;const[selectedSurah,setSelectedSurah]=useState(null);const[mistakes,setMistakes]=useState({ghunna:0,ikhfaa:0,idghaam:0,qalqalah:0});// New state for additional assessment categories\nconst[makhrajMistakes,setMakhrajMistakes]=useState({nasal:0,lips:0,tongue:0,throat:0,chest:0});const[checklistMistakes,setChecklistMistakes]=useState({maddMistakes:{incorrectElongation:false,overElongation:false,wrongMaddType:false,inconsistentLength:false},waqfIbtidaaMistakes:{stoppedWrongPlace:false,failedToStop:false,restartedIncorrectly:false,meaningConfusion:false},minorMistakes:{skippedShaddah:false,misreadSukun:false,incorrectSound:false,nasalisationError:false,inconsistentTajweed:false},majorMistakes:{skippedAyah:false,repeatedBreakdown:false,fluencyIssues:false,severeMispronunciation:false}});const incrementMistake=rule=>{setMistakes(prev=>_objectSpread(_objectSpread({},prev),{},{[rule]:prev[rule]+1}));};const decrementMistake=rule=>{setMistakes(prev=>_objectSpread(_objectSpread({},prev),{},{[rule]:Math.max(0,prev[rule]-1)}));};const resetMistakes=()=>{setMistakes({ghunna:0,ikhfaa:0,idghaam:0,qalqalah:0});setMakhrajMistakes({nasal:0,lips:0,tongue:0,throat:0,chest:0});setChecklistMistakes({maddMistakes:{incorrectElongation:false,overElongation:false,wrongMaddType:false,inconsistentLength:false},waqfIbtidaaMistakes:{stoppedWrongPlace:false,failedToStop:false,restartedIncorrectly:false,meaningConfusion:false},minorMistakes:{skippedShaddah:false,misreadSukun:false,incorrectSound:false,nasalisationError:false,inconsistentTajweed:false},majorMistakes:{skippedAyah:false,repeatedBreakdown:false,fluencyIssues:false,severeMispronunciation:false}});};// New functions for Makhraj mistakes\nconst incrementMakhrajMistake=type=>{setMakhrajMistakes(prev=>_objectSpread(_objectSpread({},prev),{},{[type]:prev[type]+1}));};const decrementMakhrajMistake=type=>{setMakhrajMistakes(prev=>_objectSpread(_objectSpread({},prev),{},{[type]:Math.max(0,prev[type]-1)}));};// Function to toggle checklist mistakes\nconst toggleChecklistMistake=(category,item)=>{setChecklistMistakes(prev=>_objectSpread(_objectSpread({},prev),{},{[category]:_objectSpread(_objectSpread({},prev[category]),{},{[item]:!prev[category][item]})}));};const calculateAccuracy=rule=>{if(!selectedSurah)return 0;const expectedCount=selectedSurah.rules[rule];if(expectedCount===0)return 100;// Skip rules with 0 expected count\nconst mistakeCount=mistakes[rule];const accuracy=Math.max(0,(expectedCount-mistakeCount)/expectedCount*100);return Math.round(accuracy);};const calculateOverallScore=()=>{if(!selectedSurah)return 0;// Get rules with expected count > 0\nconst validRules=Object.keys(selectedSurah.rules).filter(rule=>selectedSurah.rules[rule]>0);if(validRules.length===0)return 100;// Calculate total expected and total mistakes for instance-based scoring\nlet totalExpected=0;let totalMistakes=0;validRules.forEach(rule=>{const expectedCount=selectedSurah.rules[rule];const mistakeCount=mistakes[rule];totalExpected+=expectedCount;totalMistakes+=mistakeCount;});// If no expected instances, return 100%\nif(totalExpected===0)return 100;// Instance-based scoring: (1 - (Total Mistakes / Total Expected)) * 100\nconst score=(1-totalMistakes/totalExpected)*100;// Ensure score doesn't go below 0\nreturn Math.round(Math.max(0,score));};// Deduction calculation functions (kept for backward compatibility)\nconst calculateMakhrajDeduction=()=>{const totalMistakes=Object.values(makhrajMistakes).reduce((sum,count)=>sum+count,0);const deduction=totalMistakes*2;// 2% per mistake\nreturn Math.min(deduction,10);// Capped at 10%\n};const calculateMaddDeduction=()=>{const checkedItems=Object.values(checklistMistakes.maddMistakes).filter(Boolean).length;const deduction=checkedItems*2.5;// 2.5% per item\nreturn Math.min(deduction,10);// Capped at 10%\n};const calculateWaqfIbtidaaDeduction=()=>{const checkedItems=Object.values(checklistMistakes.waqfIbtidaaMistakes).filter(Boolean).length;const deduction=checkedItems*2.5;// 2.5% per item\nreturn Math.min(deduction,10);// Capped at 10%\n};const calculateMinorDeduction=()=>{const checkedItems=Object.values(checklistMistakes.minorMistakes).filter(Boolean).length;const deduction=checkedItems*1;// 1% per item\nreturn Math.min(deduction,10);// Capped at 10%\n};const calculateMajorDeduction=()=>{const checkedItems=Object.values(checklistMistakes.majorMistakes).filter(Boolean).length;const deduction=checkedItems*5;// 5% per item\nreturn Math.min(deduction,20);// Capped at 20%\n};// New weighted scoring functions\nconst calculatePronunciationScore=()=>{const makhrajDeduction=calculateMakhrajDeduction();const score=100-makhrajDeduction;return Math.max(0,Math.min(100,score));};const calculateAdditionalCategoriesScore=()=>{const maddDeduction=calculateMaddDeduction();const waqfIbtidaaDeduction=calculateWaqfIbtidaaDeduction();const minorDeduction=calculateMinorDeduction();const majorDeduction=calculateMajorDeduction();const totalDeductions=maddDeduction+waqfIbtidaaDeduction+minorDeduction+majorDeduction;const score=100-totalDeductions;return Math.max(0,Math.min(100,score));};const calculateCategoryScores=()=>{const coreTajweedScore=calculateOverallScore();const pronunciationScore=calculatePronunciationScore();const additionalCategoriesScore=calculateAdditionalCategoriesScore();// Weighted final score: Core (40%) + Pronunciation (20%) + Additional (40%)\nconst finalWeightedScore=Math.round(coreTajweedScore*0.4+pronunciationScore*0.2+additionalCategoriesScore*0.4);return{coreTajweedScore,pronunciationScore,additionalCategoriesScore,finalWeightedScore:Math.max(0,Math.min(100,finalWeightedScore))};};const calculateFinalScore=()=>{return calculateCategoryScores().finalWeightedScore;};const getRAGStatus=percentage=>{if(percentage<60)return'red';if(percentage<85)return'amber';return'green';};const value={selectedSurah,setSelectedSurah,mistakes,setMistakes,incrementMistake,decrementMistake,resetMistakes,calculateAccuracy,calculateOverallScore,getRAGStatus,// New assessment categories\nmakhrajMistakes,setMakhrajMistakes,incrementMakhrajMistake,decrementMakhrajMistake,checklistMistakes,setChecklistMistakes,toggleChecklistMistake,calculateMakhrajDeduction,calculateMaddDeduction,calculateWaqfIbtidaaDeduction,calculateMinorDeduction,calculateMajorDeduction,// New weighted scoring functions\ncalculatePronunciationScore,calculateAdditionalCategoriesScore,calculateCategoryScores,calculateFinalScore};return/*#__PURE__*/_jsx(AssessmentContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","AssessmentContext","undefined","useAssessment","context","Error","AssessmentProvider","_ref","children","selectedSurah","setSelectedSurah","mistakes","setMistakes","ghunna","ikhfaa","idghaam","qalqalah","makhrajMistakes","setMakhrajMistakes","nasal","lips","tongue","throat","chest","checklistMistakes","setChecklistMistakes","maddMistakes","incorrectElongation","overElongation","wrongMaddType","inconsistentLength","waqfIbtidaaMistakes","stoppedWrongPlace","failedToStop","restartedIncorrectly","meaningConfusion","minorMistakes","skippedShaddah","misreadSukun","incorrectSound","nasalisationError","inconsistentTajweed","majorMistakes","skippedAyah","repeatedBreakdown","fluencyIssues","severeMispronunciation","incrementMistake","rule","prev","_objectSpread","decrementMistake","Math","max","resetMistakes","incrementMakhrajMistake","type","decrementMakhrajMistake","toggleChecklistMistake","category","item","calculateAccuracy","expectedCount","rules","mistakeCount","accuracy","round","calculateOverallScore","validRules","Object","keys","filter","length","totalExpected","totalMistakes","forEach","score","calculateMakhrajDeduction","values","reduce","sum","count","deduction","min","calculateMaddDeduction","checkedItems","Boolean","calculateWaqfIbtidaaDeduction","calculateMinorDeduction","calculateMajorDeduction","calculatePronunciationScore","makhrajDeduction","calculateAdditionalCategoriesScore","maddDeduction","waqfIbtidaaDeduction","minorDeduction","majorDeduction","totalDeductions","calculateCategoryScores","coreTajweedScore","pronunciationScore","additionalCategoriesScore","finalWeightedScore","calculateFinalScore","getRAGStatus","percentage","value","Provider"],"sources":["C:/Users/habib/Dropbox/Apps/qts/src/contexts/AssessmentContext.tsx"],"sourcesContent":["\n\nimport React, { createContext, useContext, useState, ReactNode } from 'react';\n\nexport interface Surah {\n  id: number;\n  number: number;\n  name: string;\n  englishName: string;\n  tier: number;\n  rules: {\n    ghunna: number;\n    ikhfaa: number;\n    idghaam: number;\n    qalqalah: number;\n  };\n}\n\nexport interface MistakeCount {\n  ghunna: number;\n  ikhfaa: number;\n  idghaam: number;\n  qalqalah: number;\n}\n\nexport interface MakhrajCount {\n  nasal: number;\n  lips: number;\n  tongue: number;\n  throat: number;\n  chest: number;\n}\n\nexport interface ChecklistMistakes {\n  maddMistakes: {\n    incorrectElongation: boolean;\n    overElongation: boolean;\n    wrongMaddType: boolean;\n    inconsistentLength: boolean;\n  };\n  waqfIbtidaaMistakes: {\n    stoppedWrongPlace: boolean;\n    failedToStop: boolean;\n    restartedIncorrectly: boolean;\n    meaningConfusion: boolean;\n  };\n  minorMistakes: {\n    skippedShaddah: boolean;\n    misreadSukun: boolean;\n    incorrectSound: boolean;\n    nasalisationError: boolean;\n    inconsistentTajweed: boolean;\n  };\n  majorMistakes: {\n    skippedAyah: boolean;\n    repeatedBreakdown: boolean;\n    fluencyIssues: boolean;\n    severeMispronunciation: boolean;\n  };\n}\n\nexport interface CategoryScores {\n  coreTajweedScore: number;\n  pronunciationScore: number;\n  additionalCategoriesScore: number;\n  finalWeightedScore: number;\n}\n\ninterface AssessmentContextType {\n  selectedSurah: Surah | null;\n  setSelectedSurah: (surah: Surah | null) => void;\n  mistakes: MistakeCount;\n  setMistakes: (mistakes: MistakeCount) => void;\n  incrementMistake: (rule: keyof MistakeCount) => void;\n  decrementMistake: (rule: keyof MistakeCount) => void;\n  resetMistakes: () => void;\n  calculateAccuracy: (rule: keyof MistakeCount) => number;\n  calculateOverallScore: () => number;\n  getRAGStatus: (percentage: number) => 'red' | 'amber' | 'green';\n  \n  // New assessment categories\n  makhrajMistakes: MakhrajCount;\n  setMakhrajMistakes: (mistakes: MakhrajCount) => void;\n  incrementMakhrajMistake: (type: keyof MakhrajCount) => void;\n  decrementMakhrajMistake: (type: keyof MakhrajCount) => void;\n  \n  checklistMistakes: ChecklistMistakes;\n  setChecklistMistakes: (mistakes: ChecklistMistakes) => void;\n  toggleChecklistMistake: (category: keyof ChecklistMistakes, item: string) => void;\n  \n  // Updated scoring functions\n  calculateMakhrajDeduction: () => number;\n  calculateMaddDeduction: () => number;\n  calculateWaqfIbtidaaDeduction: () => number;\n  calculateMinorDeduction: () => number;\n  calculateMajorDeduction: () => number;\n  \n  // New weighted scoring functions\n  calculatePronunciationScore: () => number;\n  calculateAdditionalCategoriesScore: () => number;\n  calculateCategoryScores: () => CategoryScores;\n  calculateFinalScore: () => number;\n}\n\nconst AssessmentContext = createContext<AssessmentContextType | undefined>(undefined);\n\nexport const useAssessment = () => {\n  const context = useContext(AssessmentContext);\n  if (context === undefined) {\n    throw new Error('useAssessment must be used within an AssessmentProvider');\n  }\n  return context;\n};\n\ninterface AssessmentProviderProps {\n  children: ReactNode;\n}\n\nexport const AssessmentProvider: React.FC<AssessmentProviderProps> = ({ children }) => {\n  const [selectedSurah, setSelectedSurah] = useState<Surah | null>(null);\n  const [mistakes, setMistakes] = useState<MistakeCount>({\n    ghunna: 0,\n    ikhfaa: 0,\n    idghaam: 0,\n    qalqalah: 0,\n  });\n\n  // New state for additional assessment categories\n  const [makhrajMistakes, setMakhrajMistakes] = useState<MakhrajCount>({\n    nasal: 0,\n    lips: 0,\n    tongue: 0,\n    throat: 0,\n    chest: 0,\n  });\n\n  const [checklistMistakes, setChecklistMistakes] = useState<ChecklistMistakes>({\n    maddMistakes: {\n      incorrectElongation: false,\n      overElongation: false,\n      wrongMaddType: false,\n      inconsistentLength: false,\n    },\n    waqfIbtidaaMistakes: {\n      stoppedWrongPlace: false,\n      failedToStop: false,\n      restartedIncorrectly: false,\n      meaningConfusion: false,\n    },\n    minorMistakes: {\n      skippedShaddah: false,\n      misreadSukun: false,\n      incorrectSound: false,\n      nasalisationError: false,\n      inconsistentTajweed: false,\n    },\n    majorMistakes: {\n      skippedAyah: false,\n      repeatedBreakdown: false,\n      fluencyIssues: false,\n      severeMispronunciation: false,\n    },\n  });\n\n  const incrementMistake = (rule: keyof MistakeCount) => {\n    setMistakes(prev => ({\n      ...prev,\n      [rule]: prev[rule] + 1,\n    }));\n  };\n\n  const decrementMistake = (rule: keyof MistakeCount) => {\n    setMistakes(prev => ({\n      ...prev,\n      [rule]: Math.max(0, prev[rule] - 1),\n    }));\n  };\n\n  const resetMistakes = () => {\n    setMistakes({\n      ghunna: 0,\n      ikhfaa: 0,\n      idghaam: 0,\n      qalqalah: 0,\n    });\n    setMakhrajMistakes({\n      nasal: 0,\n      lips: 0,\n      tongue: 0,\n      throat: 0,\n      chest: 0,\n    });\n    setChecklistMistakes({\n      maddMistakes: {\n        incorrectElongation: false,\n        overElongation: false,\n        wrongMaddType: false,\n        inconsistentLength: false,\n      },\n      waqfIbtidaaMistakes: {\n        stoppedWrongPlace: false,\n        failedToStop: false,\n        restartedIncorrectly: false,\n        meaningConfusion: false,\n      },\n      minorMistakes: {\n        skippedShaddah: false,\n        misreadSukun: false,\n        incorrectSound: false,\n        nasalisationError: false,\n        inconsistentTajweed: false,\n      },\n      majorMistakes: {\n        skippedAyah: false,\n        repeatedBreakdown: false,\n        fluencyIssues: false,\n        severeMispronunciation: false,\n      },\n    });\n  };\n\n  // New functions for Makhraj mistakes\n  const incrementMakhrajMistake = (type: keyof MakhrajCount) => {\n    setMakhrajMistakes(prev => ({\n      ...prev,\n      [type]: prev[type] + 1,\n    }));\n  };\n\n  const decrementMakhrajMistake = (type: keyof MakhrajCount) => {\n    setMakhrajMistakes(prev => ({\n      ...prev,\n      [type]: Math.max(0, prev[type] - 1),\n    }));\n  };\n\n  // Function to toggle checklist mistakes\n  const toggleChecklistMistake = (category: keyof ChecklistMistakes, item: string) => {\n    setChecklistMistakes(prev => ({\n      ...prev,\n      [category]: {\n        ...prev[category],\n        [item]: !(prev[category] as any)[item],\n      },\n    }));\n  };\n\n  const calculateAccuracy = (rule: keyof MistakeCount): number => {\n    if (!selectedSurah) return 0;\n    \n    const expectedCount = selectedSurah.rules[rule];\n    if (expectedCount === 0) return 100; // Skip rules with 0 expected count\n    \n    const mistakeCount = mistakes[rule];\n    const accuracy = Math.max(0, ((expectedCount - mistakeCount) / expectedCount) * 100);\n    return Math.round(accuracy);\n  };\n\n  const calculateOverallScore = (): number => {\n    if (!selectedSurah) return 0;\n\n    // Get rules with expected count > 0\n    const validRules = Object.keys(selectedSurah.rules).filter(\n      rule => selectedSurah.rules[rule as keyof MistakeCount] > 0\n    ) as (keyof MistakeCount)[];\n\n    if (validRules.length === 0) return 100;\n\n    // Calculate total expected and total mistakes for instance-based scoring\n    let totalExpected = 0;\n    let totalMistakes = 0;\n\n    validRules.forEach(rule => {\n      const expectedCount = selectedSurah.rules[rule];\n      const mistakeCount = mistakes[rule];\n      \n      totalExpected += expectedCount;\n      totalMistakes += mistakeCount;\n    });\n\n    // If no expected instances, return 100%\n    if (totalExpected === 0) return 100;\n\n    // Instance-based scoring: (1 - (Total Mistakes / Total Expected)) * 100\n    const score = (1 - (totalMistakes / totalExpected)) * 100;\n    \n    // Ensure score doesn't go below 0\n    return Math.round(Math.max(0, score));\n  };\n\n  // Deduction calculation functions (kept for backward compatibility)\n  const calculateMakhrajDeduction = (): number => {\n    const totalMistakes = Object.values(makhrajMistakes).reduce((sum, count) => sum + count, 0);\n    const deduction = totalMistakes * 2; // 2% per mistake\n    return Math.min(deduction, 10); // Capped at 10%\n  };\n\n  const calculateMaddDeduction = (): number => {\n    const checkedItems = Object.values(checklistMistakes.maddMistakes).filter(Boolean).length;\n    const deduction = checkedItems * 2.5; // 2.5% per item\n    return Math.min(deduction, 10); // Capped at 10%\n  };\n\n  const calculateWaqfIbtidaaDeduction = (): number => {\n    const checkedItems = Object.values(checklistMistakes.waqfIbtidaaMistakes).filter(Boolean).length;\n    const deduction = checkedItems * 2.5; // 2.5% per item\n    return Math.min(deduction, 10); // Capped at 10%\n  };\n\n  const calculateMinorDeduction = (): number => {\n    const checkedItems = Object.values(checklistMistakes.minorMistakes).filter(Boolean).length;\n    const deduction = checkedItems * 1; // 1% per item\n    return Math.min(deduction, 10); // Capped at 10%\n  };\n\n  const calculateMajorDeduction = (): number => {\n    const checkedItems = Object.values(checklistMistakes.majorMistakes).filter(Boolean).length;\n    const deduction = checkedItems * 5; // 5% per item\n    return Math.min(deduction, 20); // Capped at 20%\n  };\n\n  // New weighted scoring functions\n  const calculatePronunciationScore = (): number => {\n    const makhrajDeduction = calculateMakhrajDeduction();\n    const score = 100 - makhrajDeduction;\n    return Math.max(0, Math.min(100, score));\n  };\n\n  const calculateAdditionalCategoriesScore = (): number => {\n    const maddDeduction = calculateMaddDeduction();\n    const waqfIbtidaaDeduction = calculateWaqfIbtidaaDeduction();\n    const minorDeduction = calculateMinorDeduction();\n    const majorDeduction = calculateMajorDeduction();\n    \n    const totalDeductions = maddDeduction + waqfIbtidaaDeduction + minorDeduction + majorDeduction;\n    const score = 100 - totalDeductions;\n    return Math.max(0, Math.min(100, score));\n  };\n\n  const calculateCategoryScores = (): CategoryScores => {\n    const coreTajweedScore = calculateOverallScore();\n    const pronunciationScore = calculatePronunciationScore();\n    const additionalCategoriesScore = calculateAdditionalCategoriesScore();\n    \n    // Weighted final score: Core (40%) + Pronunciation (20%) + Additional (40%)\n    const finalWeightedScore = Math.round(\n      (coreTajweedScore * 0.4) + \n      (pronunciationScore * 0.2) + \n      (additionalCategoriesScore * 0.4)\n    );\n\n    return {\n      coreTajweedScore,\n      pronunciationScore,\n      additionalCategoriesScore,\n      finalWeightedScore: Math.max(0, Math.min(100, finalWeightedScore))\n    };\n  };\n\n  const calculateFinalScore = (): number => {\n    return calculateCategoryScores().finalWeightedScore;\n  };\n\n  const getRAGStatus = (percentage: number): 'red' | 'amber' | 'green' => {\n    if (percentage < 60) return 'red';\n    if (percentage < 85) return 'amber';\n    return 'green';\n  };\n\n  const value: AssessmentContextType = {\n    selectedSurah,\n    setSelectedSurah,\n    mistakes,\n    setMistakes,\n    incrementMistake,\n    decrementMistake,\n    resetMistakes,\n    calculateAccuracy,\n    calculateOverallScore,\n    getRAGStatus,\n    \n    // New assessment categories\n    makhrajMistakes,\n    setMakhrajMistakes,\n    incrementMakhrajMistake,\n    decrementMakhrajMistake,\n    \n    checklistMistakes,\n    setChecklistMistakes,\n    toggleChecklistMistake,\n    \n    calculateMakhrajDeduction,\n    calculateMaddDeduction,\n    calculateWaqfIbtidaaDeduction,\n    calculateMinorDeduction,\n    calculateMajorDeduction,\n    \n    // New weighted scoring functions\n    calculatePronunciationScore,\n    calculateAdditionalCategoriesScore,\n    calculateCategoryScores,\n    calculateFinalScore,\n  };\n\n  return (\n    <AssessmentContext.Provider value={value}>\n      {children}\n    </AssessmentContext.Provider>\n  );\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}